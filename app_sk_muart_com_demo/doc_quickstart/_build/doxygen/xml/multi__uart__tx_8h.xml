<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="multi__uart__tx_8h" kind="file">
    <compoundname>multi_uart_tx.h</compoundname>
    <includes local="no">xs1.h</includes>
    <includes local="no">xccompat.h</includes>
    <includes local="no">xclib.h</includes>
    <includes refid="multi__uart__common_8h" local="yes">multi_uart_common.h</includes>
    <includedby refid="multi__uart__rxtx_8h" local="yes">.doxygen/module_multi_uart/src/multi_uart_rxtx.h</includedby>
    <incdepgraph>
      <node id="24">
        <label>xs1.h</label>
      </node>
      <node id="26">
        <label>xclib.h</label>
      </node>
      <node id="23">
        <label>.doxygen/module_multi_uart/src/tx/multi_uart_tx.h</label>
        <link refid="multi_uart_tx.h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>multi_uart_common.h</label>
        <link refid="multi__uart__common_8h"/>
      </node>
      <node id="25">
        <label>xccompat.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="28">
        <label>.doxygen/module_multi_uart/src/tx/multi_uart_tx.h</label>
        <link refid="multi_uart_tx.h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>.doxygen/module_multi_uart/src/multi_uart_rxtx.h</label>
        <link refid="multi__uart__rxtx_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structSTRUCT__MULTI__UART__TX__PORTS" prot="public">STRUCT_MULTI_UART_TX_PORTS</innerclass>
    <innerclass refid="structSTRUCT__MULTI__UART__TX__CHANNEL" prot="public">STRUCT_MULTI_UART_TX_CHANNEL</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="multi__uart__tx_8h_178be812e84b1e3328880e8f125174fd5" prot="public" static="no">
        <type>struct <ref refid="structSTRUCT__MULTI__UART__TX__PORTS" kindref="compound">STRUCT_MULTI_UART_TX_PORTS</ref></type>
        <definition>typedef struct STRUCT_MULTI_UART_TX_PORTS  s_multi_uart_tx_ports</definition>
        <argsstring></argsstring>
        <name>s_multi_uart_tx_ports</name>
        <briefdescription>
<para>Structure used to hold ports - used to enable extensibility in the future. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h" line="26"/>
      </memberdef>
      <memberdef kind="typedef" id="multi__uart__tx_8h_1420cda1714538b80939ce4e70085c5d0" prot="public" static="no">
        <type>struct <ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL" kindref="compound">STRUCT_MULTI_UART_TX_CHANNEL</ref></type>
        <definition>typedef struct STRUCT_MULTI_UART_TX_CHANNEL  s_multi_uart_tx_channel</definition>
        <argsstring></argsstring>
        <name>s_multi_uart_tx_channel</name>
        <briefdescription>
<para>Structure to hold configuration information and data for the UART channel TX side - this should only be interacted with via the API and not accessed directly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h" line="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="multi__uart__tx_8h_12ea247b50cfe66a68a4425fa75af4930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_tx_initialise_channel</definition>
        <argsstring>(int channel_id, e_uart_config_parity parity, e_uart_config_stop_bits stop_bits, e_uart_config_polarity polarity, int baud, int char_len)</argsstring>
        <name>uart_tx_initialise_channel</name>
        <param>
          <type>int</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="multi__uart__common_8h_152ca99b1d550bc4e113c5b8f283d9257" kindref="member">e_uart_config_parity</ref></type>
          <declname>parity</declname>
        </param>
        <param>
          <type><ref refid="multi__uart__common_8h_173324082c0fcf4aaa64b4d73190e9964" kindref="member">e_uart_config_stop_bits</ref></type>
          <declname>stop_bits</declname>
        </param>
        <param>
          <type><ref refid="multi__uart__common_8h_1458b8ab09135fdc3c3997a3f7a67ff41" kindref="member">e_uart_config_polarity</ref></type>
          <declname>polarity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baud</declname>
        </param>
        <param>
          <type>int</type>
          <declname>char_len</declname>
        </param>
        <briefdescription>
<para>Configure the UART channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel Identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parity</parametername>
</parameternamelist>
<parameterdescription>
<para>Parity configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop bit configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Start/Stop bit polarity setting </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baud</parametername>
</parameternamelist>
<parameterdescription>
<para>Required baud rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of a character in bits (e.g. 8 bits) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h" line="76"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__tx_8h_1cae2590d779a575327ba968ae3f1a99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int uart_tx_assemble_word</definition>
        <argsstring>(int channel_id, unsigned int uart_char)</argsstring>
        <name>uart_tx_assemble_word</name>
        <param>
          <type>int</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>uart_char</declname>
        </param>
        <briefdescription>
<para>Assemble full word for transmission. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uart_char</parametername>
</parameternamelist>
<parameterdescription>
<para>The character being sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Full UART word in the format (msb -&gt; lsb) STOP|PARITY|DATA|START </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h" line="84"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__tx_8h_1967e298846e7de20a3deb8aa74da8cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_tx_put_char</definition>
        <argsstring>(int channel_id, unsigned int uart_char)</argsstring>
        <name>uart_tx_put_char</name>
        <param>
          <type>int</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>uart_char</declname>
        </param>
        <briefdescription>
<para>Assemble UART word from UART Character and insert into the appropriate UART buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uart_char</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to be sent over UART </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for OK, -1 for buffer full </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h" line="92"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__tx_8h_1cce389f475ef364aeb6ac5dd194d1809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run_multi_uart_tx</definition>
        <argsstring>(streaming chanend cUART, REFERENCE_PARAM(s_multi_uart_tx_ports, tx_ports), clock uart_clock)</argsstring>
        <name>run_multi_uart_tx</name>
        <param>
          <type>streaming chanend</type>
          <declname>cUART</declname>
        </param>
        <param>
          <type>REFERENCE_PARAM(<ref refid="structSTRUCT__MULTI__UART__TX__PORTS" kindref="compound">s_multi_uart_tx_ports</ref>, tx_ports)</type>
        </param>
        <param>
          <type>clock</type>
          <declname>uart_clock</declname>
        </param>
        <briefdescription>
<para>Multi UART Transmit Thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h" line="97"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__tx_8h_11a5885fc8cbc6e9fa3834e4537735386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_tx_reconf_pause</definition>
        <argsstring>(streaming chanend cUART, timer t)</argsstring>
        <name>uart_tx_reconf_pause</name>
        <param>
          <type>streaming chanend</type>
          <declname>cUART</declname>
        </param>
        <param>
          <type>timer</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Pause the Multi-UART TX thread for reconfiguration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cUART</parametername>
</parameternamelist>
<parameterdescription>
<para>chanend to UART TX thread </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>timer for running buffer clearance pause </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h" line="104"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__tx_8h_1d679bac7603c2899abdfb8ac32185226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_tx_reconf_enable</definition>
        <argsstring>(streaming chanend cUART)</argsstring>
        <name>uart_tx_reconf_enable</name>
        <param>
          <type>streaming chanend</type>
          <declname>cUART</declname>
        </param>
        <briefdescription>
<para>Release the UART into normal operation - must be called after uart_tx_reconf_pause. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cUART</parametername>
</parameternamelist>
<parameterdescription>
<para>channel end to TX UART </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h" line="110"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__MULTI_UART_TX_H__</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__MULTI_UART_TX_H__</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xs1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xccompat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xclib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="multi__uart__common_8h" kindref="compound">multi_uart_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__STDC__</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>streaming</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__multi_uart_tx_conf_h_exists__</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;multi_uart_tx_conf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>&quot;No<sp/>UART<sp/>TX<sp/>configuration<sp/>header<sp/>file&quot;</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__multi_uart_tx_conf_h_exists__<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor">#ifdef<sp/>__XC__</highlight></codeline>
<codeline lineno="23" refid="structSTRUCT__MULTI__UART__TX__PORTS" refkind="compound"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSTRUCT__MULTI__UART__TX__PORTS" kindref="compound" tooltip="Structure used to hold ports - used to enable extensibility in the future.">STRUCT_MULTI_UART_TX_PORTS</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25" refid="structSTRUCT__MULTI__UART__TX__PORTS_1bdeb9efaf5ccf64c3475168f9fcb890c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>buffered<sp/>out<sp/><ref refid="structSTRUCT__MULTI__UART__TX__PORTS_1bdeb9efaf5ccf64c3475168f9fcb890c" kindref="member">port</ref>:8<sp/>pUart;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="structSTRUCT__MULTI__UART__TX__PORTS" kindref="compound" tooltip="Structure used to hold ports - used to enable extensibility in the future.">s_multi_uart_tx_ports</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSTRUCT__MULTI__UART__TX__PORTS" kindref="compound" tooltip="Structure used to hold ports - used to enable extensibility in the future.">STRUCT_MULTI_UART_TX_PORTS</ref></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>pUart;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}<sp/><ref refid="structSTRUCT__MULTI__UART__TX__PORTS" kindref="compound" tooltip="Structure used to hold ports - used to enable extensibility in the future.">s_multi_uart_tx_ports</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="38" refid="structSTRUCT__MULTI__UART__TX__CHANNEL" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL" kindref="compound" tooltip="Structure to hold configuration information and data for the UART channel TX side...">STRUCT_MULTI_UART_TX_CHANNEL</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_197855ae9337574681ef639b0bb9d9f81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_197855ae9337574681ef639b0bb9d9f81" kindref="member" tooltip="Configuration constants.">uart_char_len</ref>;<sp/></highlight></codeline>
<codeline lineno="43" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1a59bf25f0c6138c2908a02c566eeef1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1a59bf25f0c6138c2908a02c566eeef1c" kindref="member" tooltip="number of bits in UART word e.g.">uart_word_len</ref>;<sp/></highlight></codeline>
<codeline lineno="44" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1a3ecebb2c3f4708eb6460361dcda904c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1a3ecebb2c3f4708eb6460361dcda904c" kindref="member" tooltip="define baud rate in relation to max baud rate">clocks_per_bit</ref>;<sp/></highlight></codeline>
<codeline lineno="45" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1d65ed608b5e749a9f458448acfca7f87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1d65ed608b5e749a9f458448acfca7f87" kindref="member" tooltip="define if output is inverted (set to 1)">invert_output</ref>;<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1953945bff6900eb27b489760bd069c0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="multi__uart__common_8h_173324082c0fcf4aaa64b4d73190e9964" kindref="member" tooltip="Configure the number of stop bits.">e_uart_config_stop_bits</ref><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1953945bff6900eb27b489760bd069c0c" kindref="member" tooltip="Mode definition.">sb_mode</ref>;</highlight></codeline>
<codeline lineno="51" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_13085aa6bca4db90500042109a7902ced" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="multi__uart__common_8h_152ca99b1d550bc4e113c5b8f283d9257" kindref="member" tooltip="Define the parity configuration.">e_uart_config_parity</ref><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_13085aa6bca4db90500042109a7902ced" kindref="member">parity_mode</ref>;</highlight></codeline>
<codeline lineno="52" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1e4e9fb34515a730c2ac01ddb724a1565" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="multi__uart__common_8h_1458b8ab09135fdc3c3997a3f7a67ff41" kindref="member" tooltip="Start bit polarity configuration (currently unused).">e_uart_config_polarity</ref><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1e4e9fb34515a730c2ac01ddb724a1565" kindref="member">polarity_mode</ref>;</highlight></codeline>
<codeline lineno="57" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1755c0ee1e6363cffeec0f655b5a26a14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1755c0ee1e6363cffeec0f655b5a26a14" kindref="member" tooltip="Buffering variables.">wr_ptr</ref>;<sp/></highlight></codeline>
<codeline lineno="58" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1222d26ceeba6b8939da18db7a08fcf5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1222d26ceeba6b8939da18db7a08fcf5e" kindref="member" tooltip="Read pointer.">rd_ptr</ref>;<sp/></highlight></codeline>
<codeline lineno="59" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1dea9d1b712bfc6fb636e16a3af2e0fcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1dea9d1b712bfc6fb636e16a3af2e0fcf" kindref="member" tooltip="Number of valid entries in the buffer.">nelements</ref>;<sp/></highlight></codeline>
<codeline lineno="60" refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1393fd2b23065013d20794980dc697d05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL_1393fd2b23065013d20794980dc697d05" kindref="member" tooltip="Buffer array.">buf</ref>[UART_TX_BUF_SIZE];<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><ref refid="structSTRUCT__MULTI__UART__TX__CHANNEL" kindref="compound" tooltip="Structure to hold configuration information and data for the UART channel TX side...">s_multi_uart_tx_channel</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="multi__uart__tx_8h_12ea247b50cfe66a68a4425fa75af4930" kindref="member" tooltip="Configure the UART channel.">uart_tx_initialise_channel</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_id,<sp/><ref refid="multi__uart__common_8h_152ca99b1d550bc4e113c5b8f283d9257" kindref="member" tooltip="Define the parity configuration.">e_uart_config_parity</ref><sp/>parity,<sp/><ref refid="multi__uart__common_8h_173324082c0fcf4aaa64b4d73190e9964" kindref="member" tooltip="Configure the number of stop bits.">e_uart_config_stop_bits</ref><sp/>stop_bits,<sp/><ref refid="multi__uart__common_8h_1458b8ab09135fdc3c3997a3f7a67ff41" kindref="member" tooltip="Start bit polarity configuration (currently unused).">e_uart_config_polarity</ref><sp/>polarity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baud,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>char_len<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="multi__uart__tx_8h_1cae2590d779a575327ba968ae3f1a99c" kindref="member" tooltip="Assemble full word for transmission.">uart_tx_assemble_word</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_id,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uart_char<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="multi__uart__tx_8h_1967e298846e7de20a3deb8aa74da8cfa" kindref="member" tooltip="Assemble UART word from UART Character and insert into the appropriate UART buffer...">uart_tx_put_char</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_id,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uart_char<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__uart__tx_8h_1cce389f475ef364aeb6ac5dd194d1809" kindref="member" tooltip="Multi UART Transmit Thread.">run_multi_uart_tx</ref>(<sp/>streaming<sp/>chanend<sp/>cUART,<sp/>REFERENCE_PARAM(<ref refid="structSTRUCT__MULTI__UART__TX__PORTS" kindref="compound" tooltip="Structure used to hold ports - used to enable extensibility in the future.">s_multi_uart_tx_ports</ref>,<sp/>tx_ports),<sp/>clock<sp/>uart_clock);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__uart__tx_8h_11a5885fc8cbc6e9fa3834e4537735386" kindref="member" tooltip="Pause the Multi-UART TX thread for reconfiguration.">uart_tx_reconf_pause</ref>(<sp/>streaming<sp/>chanend<sp/>cUART,<sp/>timer<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__uart__tx_8h_1d679bac7603c2899abdfb8ac32185226" kindref="member" tooltip="Release the UART into normal operation - must be called after uart_tx_reconf_pause...">uart_tx_reconf_enable</ref>(<sp/>streaming<sp/>chanend<sp/>cUART<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__MULTI_UART_TX_H__<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/tx/multi_uart_tx.h"/>
  </compounddef>
</doxygen>
