<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="multi__uart__rx_8h" kind="file">
    <compoundname>multi_uart_rx.h</compoundname>
    <includes local="no">xs1.h</includes>
    <includes local="no">xccompat.h</includes>
    <includes local="no">xclib.h</includes>
    <includes refid="multi__uart__common_8h" local="yes">multi_uart_common.h</includes>
    <includedby refid="multi__uart__rxtx_8h" local="yes">.doxygen/module_multi_uart/src/multi_uart_rxtx.h</includedby>
    <incdepgraph>
      <node id="17">
        <label>xs1.h</label>
      </node>
      <node id="19">
        <label>xclib.h</label>
      </node>
      <node id="20">
        <label>multi_uart_common.h</label>
        <link refid="multi__uart__common_8h"/>
      </node>
      <node id="16">
        <label>.doxygen/module_multi_uart/src/rx/multi_uart_rx.h</label>
        <link refid="multi_uart_rx.h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>xccompat.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="21">
        <label>.doxygen/module_multi_uart/src/rx/multi_uart_rx.h</label>
        <link refid="multi_uart_rx.h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>.doxygen/module_multi_uart/src/multi_uart_rxtx.h</label>
        <link refid="multi__uart__rxtx_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structSTRUCT__MULTI__UART__RX__PORTS" prot="public">STRUCT_MULTI_UART_RX_PORTS</innerclass>
    <innerclass refid="structSTRUCT__MULTI__UART__RX__CHANNEL" prot="public">STRUCT_MULTI_UART_RX_CHANNEL</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="multi__uart__rx_8h_11dbd3674e047ef85ca91c8b166b89c9c" prot="public" static="no">
        <name>UART_RX_STOP</name>
        <initializer>0xFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="21" bodyfile="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__uart__rx_8h_1222bf8f99c91ee1eea4951063f243a84" prot="public" static="no">
        <name>UART_RX_GO</name>
        <initializer>0xFE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="22" bodyfile="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="multi__uart__rx_8h_1b100c39de311a12a69d90fb7526057a2" prot="public" static="no">
        <type>struct <ref refid="structSTRUCT__MULTI__UART__RX__PORTS" kindref="compound">STRUCT_MULTI_UART_RX_PORTS</ref></type>
        <definition>typedef struct STRUCT_MULTI_UART_RX_PORTS  s_multi_uart_rx_ports</definition>
        <argsstring></argsstring>
        <name>s_multi_uart_rx_ports</name>
        <briefdescription>
<para>Structure used to hold ports - used to enable extensibility in the future. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="34"/>
      </memberdef>
      <memberdef kind="typedef" id="multi__uart__rx_8h_1d2955e95899aaf54768b2e6628213a59" prot="public" static="no">
        <type>struct <ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL" kindref="compound">STRUCT_MULTI_UART_RX_CHANNEL</ref></type>
        <definition>typedef struct STRUCT_MULTI_UART_RX_CHANNEL  s_multi_uart_rx_channel</definition>
        <argsstring></argsstring>
        <name>s_multi_uart_rx_channel</name>
        <briefdescription>
<para>Structure to hold configuration information and data for the UART channel RX side - this should only be interacted with via the API and not accessed directly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="multi__uart__rx_8h_1ce968e7c49c6ad395c5e38c82def00d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_rx_initialise_channel</definition>
        <argsstring>(int channel_id, e_uart_config_parity parity, e_uart_config_stop_bits stop_bits, e_uart_config_polarity polarity, int baud, int char_len)</argsstring>
        <name>uart_rx_initialise_channel</name>
        <param>
          <type>int</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="multi__uart__common_8h_152ca99b1d550bc4e113c5b8f283d9257" kindref="member">e_uart_config_parity</ref></type>
          <declname>parity</declname>
        </param>
        <param>
          <type><ref refid="multi__uart__common_8h_173324082c0fcf4aaa64b4d73190e9964" kindref="member">e_uart_config_stop_bits</ref></type>
          <declname>stop_bits</declname>
        </param>
        <param>
          <type><ref refid="multi__uart__common_8h_1458b8ab09135fdc3c3997a3f7a67ff41" kindref="member">e_uart_config_polarity</ref></type>
          <declname>polarity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baud</declname>
        </param>
        <param>
          <type>int</type>
          <declname>char_len</declname>
        </param>
        <briefdescription>
<para>Configure the UART channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel Identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parity</parametername>
</parameternamelist>
<parameterdescription>
<para>Parity configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stop_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop bit configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">polarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Polarity configuration of start/stop bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">baud</parametername>
</parameternamelist>
<parameterdescription>
<para>Required baud rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">char_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of a character in bits (e.g. 8 bits) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="67"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__rx_8h_13e92b6e7704b159798b94a6f8f5fb90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_rx_validate_char</definition>
        <argsstring>(int chan_id, REFERENCE_PARAM(unsigned, uart_word))</argsstring>
        <name>uart_rx_validate_char</name>
        <param>
          <type>int</type>
          <declname>chan_id</declname>
        </param>
        <param>
          <type>REFERENCE_PARAM(unsigned, uart_word)</type>
        </param>
        <briefdescription>
<para>Validate received UART word according to channel configuration and provide a cleaned UART character. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">chan_id</parametername>
</parameternamelist>
<parameterdescription>
<para>UART channel ID from which the char came from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">uart_word</parametername>
</parameternamelist>
<parameterdescription>
<para>UART char in the format DATA_BITS|PARITY|STOP BITS (parity optional according to config), modified to clean UART charcater on successful * return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 on valid data, -1 on validation fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="77"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__rx_8h_1708adc889bc7ddd01b349d530f43da98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned uart_rx_grab_char</definition>
        <argsstring>(unsigned chan_id)</argsstring>
        <name>uart_rx_grab_char</name>
        <param>
          <type>unsigned</type>
          <declname>chan_id</declname>
        </param>
        <briefdescription>
<para>Get the received value from an RX slot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan_id</parametername>
</parameternamelist>
<parameterdescription>
<para>channel id to grab </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value in slot </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="84"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__rx_8h_1a932f9070b2b4c747c30fd31e1f37ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run_multi_uart_rx</definition>
        <argsstring>(streaming chanend cUART, REFERENCE_PARAM(s_multi_uart_rx_ports, tx_ports), clock uart_clock)</argsstring>
        <name>run_multi_uart_rx</name>
        <param>
          <type>streaming chanend</type>
          <declname>cUART</declname>
        </param>
        <param>
          <type>REFERENCE_PARAM(<ref refid="structSTRUCT__MULTI__UART__RX__PORTS" kindref="compound">s_multi_uart_rx_ports</ref>, tx_ports)</type>
        </param>
        <param>
          <type>clock</type>
          <declname>uart_clock</declname>
        </param>
        <briefdescription>
<para>Multi-UART Receive Server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cUART</parametername>
</parameternamelist>
<parameterdescription>
<para>channel interface for RX UART </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_ports</parametername>
</parameternamelist>
<parameterdescription>
<para>port structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uart_clock</parametername>
</parameternamelist>
<parameterdescription>
<para>clock block for UART </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="92"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__rx_8h_107ceddccd039b352b3be1a1bd84e2366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_rx_reconf_pause</definition>
        <argsstring>(streaming chanend cUART)</argsstring>
        <name>uart_rx_reconf_pause</name>
        <param>
          <type>streaming chanend</type>
          <declname>cUART</declname>
        </param>
        <briefdescription>
<para>Pause the UART via channel for reconfiguration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cUART</parametername>
</parameternamelist>
<parameterdescription>
<para>streaming channel end to RX server </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="98"/>
      </memberdef>
      <memberdef kind="function" id="multi__uart__rx_8h_12b3234597dcba55d0b35290c8a32a2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_rx_reconf_enable</definition>
        <argsstring>(streaming chanend cUART)</argsstring>
        <name>uart_rx_reconf_enable</name>
        <param>
          <type>streaming chanend</type>
          <declname>cUART</declname>
        </param>
        <briefdescription>
<para>Release the UART into normal operation - must be called after uart_rx_reconf_pause. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cUART</parametername>
</parameternamelist>
<parameterdescription>
<para>channel end to RX UART </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h" line="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__MULTI_UART_RX_H__</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__MULTI_UART_RX_H__</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xs1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xccompat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xclib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="multi__uart__common_8h" kindref="compound">multi_uart_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__STDC__</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>streaming</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__multi_uart_rx_conf_h_exists__</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;multi_uart_rx_conf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>not<sp/>required<sp/>to<sp/>be<sp/>defined,<sp/>but<sp/>is<sp/>used<sp/>in<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>&quot;No<sp/>RX<sp/>UART<sp/>Configuration<sp/>file&quot;</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__multi_uart_rx_conf_h_exists__<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>define<sp/>channel<sp/>commands<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="multi__uart__rx_8h_11dbd3674e047ef85ca91c8b166b89c9c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UART_RX_STOP<sp/><sp/><sp/><sp/>0xFF</highlight></codeline>
<codeline lineno="22" refid="multi__uart__rx_8h_1222bf8f99c91ee1eea4951063f243a84" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UART_RX_GO<sp/><sp/><sp/><sp/>0xFE</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="27" refid="structSTRUCT__MULTI__UART__RX__PORTS" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSTRUCT__MULTI__UART__RX__PORTS" kindref="compound" tooltip="Structure used to hold ports - used to enable extensibility in the future.">STRUCT_MULTI_UART_RX_PORTS</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XC__</highlight></codeline>
<codeline lineno="30" refid="structSTRUCT__MULTI__UART__RX__PORTS_1f8be4052c5a0c6f44c621393ca052ddc" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>buffered<sp/>in<sp/><ref refid="structSTRUCT__MULTI__UART__RX__PORTS_1f8be4052c5a0c6f44c621393ca052ddc" kindref="member">port</ref>:32<sp/>pUart;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>pUart;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/><ref refid="structSTRUCT__MULTI__UART__RX__PORTS" kindref="compound" tooltip="Structure used to hold ports - used to enable extensibility in the future.">s_multi_uart_rx_ports</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structSTRUCT__MULTI__UART__RX__CHANNEL" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL" kindref="compound" tooltip="Structure to hold configuration information and data for the UART channel RX side...">STRUCT_MULTI_UART_RX_CHANNEL</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43" refid="structSTRUCT__MULTI__UART__RX__CHANNEL_1b46ea6c450e5ffa595e49929d96099d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL_1b46ea6c450e5ffa595e49929d96099d8" kindref="member" tooltip="length of the UART character">uart_char_len</ref>;<sp/></highlight></codeline>
<codeline lineno="44" refid="structSTRUCT__MULTI__UART__RX__CHANNEL_1a6cd3efc3fa9459c6b77aa91430c1f5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL_1a6cd3efc3fa9459c6b77aa91430c1f5b" kindref="member" tooltip="number of bits in UART word e.g.">uart_word_len</ref>;<sp/></highlight></codeline>
<codeline lineno="45" refid="structSTRUCT__MULTI__UART__RX__CHANNEL_14daff05251a06240da1fa3573d680eb4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL_14daff05251a06240da1fa3573d680eb4" kindref="member" tooltip="define baud rate in relation to max baud rate">clocks_per_bit</ref>;<sp/></highlight></codeline>
<codeline lineno="46" refid="structSTRUCT__MULTI__UART__RX__CHANNEL_10f1e6d677a13c7669fbd7a9021fbc4ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL_10f1e6d677a13c7669fbd7a9021fbc4ba" kindref="member" tooltip="define if output is inverted (set to 1)">invert_output</ref>;<sp/></highlight></codeline>
<codeline lineno="47" refid="structSTRUCT__MULTI__UART__RX__CHANNEL_19a2ac15b8605197f77db5b0fa8e2b1da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL_19a2ac15b8605197f77db5b0fa8e2b1da" kindref="member" tooltip="sample in bit stream to use">use_sample</ref>;<sp/></highlight></codeline>
<codeline lineno="50" refid="structSTRUCT__MULTI__UART__RX__CHANNEL_14ea9c6ec4f113fafbf069dee5651366b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="multi__uart__common_8h_173324082c0fcf4aaa64b4d73190e9964" kindref="member" tooltip="Configure the number of stop bits.">e_uart_config_stop_bits</ref><sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL_14ea9c6ec4f113fafbf069dee5651366b" kindref="member" tooltip="Stop bit configuration.">sb_mode</ref>;<sp/></highlight></codeline>
<codeline lineno="51" refid="structSTRUCT__MULTI__UART__RX__CHANNEL_1b702347dbbcde2f71b1f2792e1b1e684" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="multi__uart__common_8h_152ca99b1d550bc4e113c5b8f283d9257" kindref="member" tooltip="Define the parity configuration.">e_uart_config_parity</ref><sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL_1b702347dbbcde2f71b1f2792e1b1e684" kindref="member" tooltip="Parity mode configuration.">parity_mode</ref>;<sp/></highlight></codeline>
<codeline lineno="52" refid="structSTRUCT__MULTI__UART__RX__CHANNEL_199a5fc8882c5db877c964fefbefd0387" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="multi__uart__common_8h_1458b8ab09135fdc3c3997a3f7a67ff41" kindref="member" tooltip="Start bit polarity configuration (currently unused).">e_uart_config_polarity</ref><sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL_199a5fc8882c5db877c964fefbefd0387" kindref="member" tooltip="Polarity mode of start/stop bits.">polarity_mode</ref>;<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}<sp/><ref refid="structSTRUCT__MULTI__UART__RX__CHANNEL" kindref="compound" tooltip="Structure to hold configuration information and data for the UART channel RX side...">s_multi_uart_rx_channel</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="multi__uart__rx_8h_1ce968e7c49c6ad395c5e38c82def00d0" kindref="member" tooltip="Configure the UART channel.">uart_rx_initialise_channel</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_id,<sp/><ref refid="multi__uart__common_8h_152ca99b1d550bc4e113c5b8f283d9257" kindref="member" tooltip="Define the parity configuration.">e_uart_config_parity</ref><sp/>parity,<sp/><ref refid="multi__uart__common_8h_173324082c0fcf4aaa64b4d73190e9964" kindref="member" tooltip="Configure the number of stop bits.">e_uart_config_stop_bits</ref><sp/>stop_bits,<sp/><ref refid="multi__uart__common_8h_1458b8ab09135fdc3c3997a3f7a67ff41" kindref="member" tooltip="Start bit polarity configuration (currently unused).">e_uart_config_polarity</ref><sp/>polarity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baud,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>char_len<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="multi__uart__rx_8h_13e92b6e7704b159798b94a6f8f5fb90a" kindref="member" tooltip="Validate received UART word according to channel configuration and provide a cleaned...">uart_rx_validate_char</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chan_id,<sp/>REFERENCE_PARAM(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,uart_word)<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="multi__uart__rx_8h_1708adc889bc7ddd01b349d530f43da98" kindref="member" tooltip="Get the received value from an RX slot.">uart_rx_grab_char</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>chan_id<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__uart__rx_8h_1a932f9070b2b4c747c30fd31e1f37ce7" kindref="member" tooltip="Multi-UART Receive Server.">run_multi_uart_rx</ref>(<sp/>streaming<sp/>chanend<sp/>cUART,<sp/>REFERENCE_PARAM(<ref refid="structSTRUCT__MULTI__UART__RX__PORTS" kindref="compound" tooltip="Structure used to hold ports - used to enable extensibility in the future.">s_multi_uart_rx_ports</ref>,<sp/>tx_ports),<sp/>clock<sp/>uart_clock<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__uart__rx_8h_107ceddccd039b352b3be1a1bd84e2366" kindref="member" tooltip="Pause the UART via channel for reconfiguration.">uart_rx_reconf_pause</ref>(<sp/>streaming<sp/>chanend<sp/>cUART<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__uart__rx_8h_12b3234597dcba55d0b35290c8a32a2b2" kindref="member" tooltip="Release the UART into normal operation - must be called after uart_rx_reconf_pause...">uart_rx_reconf_enable</ref>(<sp/>streaming<sp/>chanend<sp/>cUART<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__MULTI_UART_RX_H__<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/scratch/dan/OSS/sc_multi_uart/doc/.doxygen/module_multi_uart/src/rx/multi_uart_rx.h"/>
  </compounddef>
</doxygen>
