Example Applications
=====================

This section discusses both the demonstration and test applications that are utilised in verification of the multi-UART component. It also deals with the scripts that are utilised to ensure that the UART is operating under a variety of conditions (such as long streams of burst traffic).

Demonstration and Test Applications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Demo Application Hardware
---------------------------

The echo demonstration application can be run on the slice kit Board. The following other parts are required - 

    * USB to Serial adapter (e.g. FTDI TTL-232R-3V3 from Farnell)
    
The demo applications will build by default for the Motor Control Board. To build for XK-1 you need to make the following changes.

.. list-table::
    :header-rows: 1
    
    * - File
      - Original Value
      - New Value
    * - ``src/main.xc``
      - ``#define UART_CORE 1``
      - ``#define UART_CORE 0``
    * - ``Makefile``
      - ``TARGET = SKC_ALL``

MultiUART component requires 8-bit ports for both UART transmit and UART receive ports. The version runs on L1 (one core). The Slices should be assembled in the following manner:

===================== ====================== ====================== =======================
**Slice**             **Core Board - Core**  **Core Board - Type**  **Core Board - Jumper**
===================== ====================== ====================== =======================
UART                  Core 0                 Type 0                 J4
===================== ====================== ====================== =======================

The UART slice has two types of voltage levels of communications.
    * CMOS TTL
    * RS-232
    
By default, this uses the RS-232 levels. In order to use the CMOS TTL levels, short J3 pins (25-26) of the MUART slice. At a time, only one voltage level type can be used for all 8 UART channels (RS-232 or CMOS TTL). When using the RS-232 levels, UART device pins must be connected to J4 of the UART slice. When using TTL levels, UART device pins must be connected to J3 of UART slice (along with J3 25-26 pins shorted). UART channel information of UART slice is as:

.. _table_connector_breakout:

.. table:: MUART slice for Demo Applications 

================ ===================== =====================
**UART Channel** **J3/J4 Pin no.(TX)** **J3/J4 Pin no.(RX)**
================ ===================== =====================
0                1                     2
1                5                     6
2                7                     8 
3                11                    12
4                13                    14
5                17                    18
6                19                    20
7                23                    24
================ ===================== =====================


Demo Application Configuration
--------------------------------

The demo application can be compiled and run in following modes.
        
    * Echo Test Mode
    
        * This mode of operation produces an application that operates as an echo device. This therefore echos back any characters that it receives via the same transmit UART channel.
        
Configuration is done utilising the defines listed out below.

.. literalinclude:: app_multi_uart_demo/src/main.xc
    :start-after: //:demo_app_config
    :end-before:  //:
    
**LOOP_REF_TEST**

    This configures the tests with internal clocking only. This means that no external clock source is required to conduct testing. However it will only operate at multiples the internal reference clock (e.g. 100000 bps).
    
    
Application Description
------------------------

The Echo Test demonstration application shows a typical structure of an application that might be implemented by the user of this component. The diagram in :ref:`fig_echo_struct` shows the structure of the demonstration application.

In addition to the two multi-UART threads the application utilises two further threads - one providing buffering for the UART RX and one handling to the pushing of data to the TX buffer. The RX buffering is implemented as an example only and is not strictly necessary in this application as the TX thread already provides some buffering.

When the RX thread receives a character over the UART it saves it into the local single entry buffer and puts a data token into the channel. This data token is received by RX buffering thread and tells it which UART channel a character has been received on. The RX buffering thread then grabs this character out of the buffer slot, validates it utilising the provided validation function and inserts it into a larger, more comprehensive buffer.

The TX thread operates by polling the buffer between the RX buffering thread and the Echo Application thread. When an entry is seen it pulls it from the buffer and utilises the API to push the value into the TX thread buffer. From there the TX thread will send that value on the correct UART channel on the 8 bit port.

The channel for the TX thread is primarily used for reconfiguration. This is discussed in more detail in :ref:`sec_reconf_rxtx`.

Specific usage of the API is discussed in :ref:`sec_interfacing_tx` and :ref:`sec_interfacing_rx`.

.. _fig_echo_struct:

.. figure:: images/EchoSoftwareDiagram.png

